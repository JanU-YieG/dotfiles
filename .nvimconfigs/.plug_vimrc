"插件：translator
" let g:translator_proxy_url = 'socks5://127.0.0.1:1080'
" Echo translation in the cmdline
" nmap <silent> <Leader>t <Plug>Translate
" vmap <silent> <Leader>t <Plug>TranslateV
" Display translation in a window
nmap <silent> <Leader>t <Plug>TranslateW
vmap <silent> <Leader>t :TranslateW<CR>
" vmap <silent> <Leader>w <Plug>TranslateWV
" Replace the text with translation
" nmap <silent> <Leader>r <Plug>TranslateR
" vmap <silent> <Leader>r <Plug>TranslateRV
" Translate the text in clipboard
" nmap <silent> <Leader>x <Plug>TranslateX
nnoremap <silent><expr> <M-f> translator#window#float#has_scroll() ?
                            \ translator#window#float#scroll(1) : "\<M-f>"
nnoremap <silent><expr> <M-b> translator#window#float#has_scroll() ?
                            \ translator#window#float#scroll(0) : "\<M-f>"



"插件:limelight
" autocmd! User GoyoEnter Limelight
" autocmd! User GoyoLeave Limelight!
" nmap <Leader>l <Plug>(Limelight)
" xmap <Leader>l <Plug>(Limelight)
" Color name (:help cterm-colors) or ANSI code
" let g:limelight_conceal_ctermfg = 'gray'
" let g:limelight_conceal_ctermfg = 240
" Color name (:help gui-colors) or RGB color
" let g:limelight_conceal_guifg = 'DarkGray'
" let g:limelight_conceal_guifg = '#777777'
" Default: 0.5
" let g:limelight_default_coefficient = 0.7
" Number of preceding/following paragraphs to include (default: 0)
" let g:limelight_paragraph_span = 0
" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
" let g:limelight_bop = '^\s'
" let g:limelight_eop = '\ze\n^\s'
" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
" let g:limelight_priority = -1



"插件:'vim-airline/vim-airline'和'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts = 1  " 支持 powerline 字体
"选择airline显示的主题
" let g:airline_theme='powerlineish'
let g:airline_theme='one'
let g:airline#extensions#tabline#enabled = 1 " 显示窗口tab和buffer
let g:airline#extensions#tabline#buffer_nr_show=1 " 显示 buffer 编号，方便切换
let g:airline#extensions#branch#enabled = 1 "显示git分支
" let g:airline#extensions#tabline#formatter = 'default'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" let g:airline_left_sep = '▶'
" let g:airline_left_alt_sep = '❯'
" let g:airline_right_sep = '◀'
" let g:airline_right_alt_sep = '❮'
" let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'



"插件： 'scrooloose/nerdtree'
" When writing a buffer (no delay).
"按r刷新nerdtree;s vsplit 一个新窗口打开选中文件，并跳到该窗口;t 在新Tab 中打开选中文件/书签，并跳到新 Tab;i split 一个新窗口打开选中文件，并跳到该窗口;m    文件操作：复制、删除、移动等;
"call neomake#configure#automake('w')
nnoremap <leader>v :NERDTreeFind<cr>
nnoremap <leader>g :NERDTreeToggle<cr>
let NERDTreeShowHidden=1
let NERDTreeAutoDeleteBuffer = 1  " Auto delete buffer deleted with NerdTree
" 让目录显示到左边/右边
let g:NERDTreeWinPos ="right"
"Making it prettier
" let NERDTreeMinimalUI = 1
" let NERDTreeDirArrows = 1
" autocmd vimenter * NERDTree  "自动开启Nerdtree
"let g:NERDTreeWinSize = 25 "设定 NERDTree 视窗大小
"let NERDTreeShowBookmarks=1  " 开启Nerdtree时自动显示Bookmarks
""打开vim时如果没有文件自动打开NERDTree
" autocmd vimenter * if !argc()|NERDTree|endif
"当NERDTree为剩下的唯一窗口时自动关闭
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") &&
"b:NERDTree.isTabTree()) | q | endif
""设置树的显示图标
" let g:NERDTreeDirArrowExpandable = '▸'
" let g:NERDTreeDirArrowCollapsible = '▾'
" let NERDTreeIgnore = ['\.pyc$']  " 过滤所有.pyc文件不显示
"let g:NERDTreeShowLineNumbers=1  " 是否显示行号
"let g:NERDTreeHidden=0     "不显示隐藏文件




"插件：scrooloose/nerdtree和Xuyuanp/nerdtree-git-plugin
"显示忽略文件的状态
" let g:NERDTreeShowIgnoredStatus = 1
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }




"插件：'easymotion/vim-easymotion'
"默认<leader><leader>w向下查找，<leader><leader>b向上查找
" 查找视区全部
nmap ss <Plug>(easymotion-s2)



"插件：'majutsushi/tagbar'
noremap <leader>T :TagbarToggle<cr>



"插件：'zivyangll/git-blame.vim'
nnoremap <Leader>s :<C-u>call gitblame#echo()<CR>
"'junegunn/fzf' 'junegunn/fzf.vim'
nnoremap <leader>a :Rg<space>
nnoremap <leader>A :exec "Rg ".expand("<cword>")<cr>
autocmd VimEnter * command! -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)



" 插件：'moll/vim-bbye'
nnoremap <Leader>q :Bdelete<CR>



"插件：mattn/vim-gist
":Gist发布到github以新的gist存储;:Gist -l列出当前用户所有公开的gist;Gist -b发布新的gist然后打开浏览器查看gist;Gist -f克隆到自己名下;Gist id将指定id(id就是git文件最后的域名)的gist载入到新缓冲区;Gist -P更新公开的gist;Gist -p更新私有的gist
" let g:gist_use_password_in_gitconfig = 1
" let github_user='Borer'
" let g:github_token
"发布后打开浏览器
" let g:gist_open_browser_after_post = 1



"插件 fzf.vim
nnoremap <silent> <Leader>f :Files<CR>
nnoremap <silent> <Leader>b :Buffers<CR>



"插件 vim-makrdown
" let g:vim_markdown_folding_disable=1
" let g:vim_markdown_no_default_key_mappings = 1
" let g:vim_markdown_toc_autofit = 1
" set conceallevel=2
" let g:vim_markdown_conceal = 0



" 插件:apzelos / blamer.nvim  用于直接显示代码某行是谁写的
" 启用该插件
" let g:blamer_enabled = 1
" 设置延迟时间：毫秒;设置太低将导致性能问题
" let g:blamer_delay = 10
" 设置可视模式下启用/禁用blamer
" let g:blamer_show_in_visual_modes = 0
" 模板前缀设置
" let g:blamer_prefix = '   '
" 设置模板：可用选项：<author>，<author-mail>，<author-time>，<committer>，<committer-mail>，<committer-time>，<summary>，<commit-short>，<commit-long>
" let g:blamer_template = '<committer>, <committer-time> • <summary>'
" 设置时间格式
" let g:blamer_date_format = '%d/%m/%y %H:%M'
" 设置显示颜色link Blamer Comment
" highlight Blamer guifg=lightgrey



" 插件:Solarized 8配置
" 不使用终端的颜色等配置
" set t_Co=16



" 插件:ayu主题
" set termguicolors     " enable true colors support
" let ayucolor=light  " for light version of theme
" let ayucolor=mirage " for mirage version of theme
" let ayucolor=dark   " for dark version of theme



" 插件：rust.vim
let g:rustfmt_autosave = 1 "使用rustfmt格式化代码
" preservim/nerdcommenter插件
" <leader>cc添加注释，<leader>cu取消注释,<leader>c<space>智能判断添加和取消注释
let g:NERDSpaceDelims=1     " 注释后面自动加空格



" 插件:vim-lsp-settings配置
" 设置语言servers存放目录默认为：$HOME/.local/share/vim-lsp-settings/servers
" :LspInstallServer在编辑的文件执行，自动安装对应语言server
" g:lsp_settings_servers_dir=////
" set foldmethod=expr
"   \ foldexpr=lsp#ui#vim#folding#foldexpr()
"     \ foldtext=lsp#ui#vim#folding#foldtext()

" if executable('pyls')
    " " pip install python-language-server
    " au User lsp_setup call lsp#register_server({
        " \ 'name': 'pyls',
        " \ 'cmd': {server_info->['pyls']},
        " \ 'allowlist': ['python'],
        " \ })
" endif
" 禁用文件诊断
" let g:lsp_diagnostics_enabled  =  0
" 正常模式下启用光标下回显
let g:lsp_signs_enabled  =  1
let g:lsp_diagnostics_echo_cursor = 1
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    " if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-declaration)
    nmap <buffer> <c-]> <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gD <plug>(lsp-implementation)
    nmap <buffer> 1gd <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nmap <buffer> g0 <plug>(lsp-document-symbol)
    nmap <buffer> gW <plug>(lsp-workspace-symbol)
    nmap <buffer> <leader>df <plug>(lsp-document-format)
    nmap <buffer> <leader>drf <plug>(lsp-document-range-format)
endfunction
augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('~/vim-lsp.log')

" " for asyncomplete.vim log
" let g:asyncomplete_log_file = expand('~/asyncomplete.log')
"
let g:fakeclip_provide_clipboard_key_mappings = !empty($WAYLAND_DISPLAY)

" Plug 'tpope/vim-surround'
" cs,ds,yss

" Plug 'godlygeek/tabular'
let g:tabular_loaded = 1
vnoremap <Leader>l :Tabularize /
