"------设置leader键-----------
let mapleader=','

"------设置主题-----------
" colorscheme hybrid
colorscheme gruvbox
" colorscheme one
" colorscheme seoul256
" colorscheme lucius


"-------vim基础配置-----
" 显示行号
set number
" 显示当前行
set cursorline
" 显示当前列
" set cursorcolumn
" 打开相对行显示
set relativenumber
"始终显示窗口状态即使只有两个
set laststatus=2
"显示行号和列号
set ruler
" 打开语法高亮显示
syntax enable
" 允许用指定语法高亮替换默认
" syntax on
"如果行尾有多余的空格（包括 Tab 键），该配置将让这些空格显示成可见的小方块
" Easiest method is to do :set list, which will show tabs as »■ and end of line as ■
set listchars=tab:»»,trail:■
set list
" not show tabs as »■ and end of line as ■
" set invlist
" 设置背景色
set background=dark
" set background=light
" tab设置为4个空格
set tabstop=4
" 设置格式化时制表符占用空格数
set shiftwidth=4
" 将制表符扩展为空格
set expandtab
"在底部显示键入的命令
set showcmd
set vb t_vb=
" 自动对齐当o或O等
set autoindent
" 智能对齐
set smartindent
" 用space替代tab输入
set expandtab
" 不用space替代tab输入，默认如此
" set noexpandtab
" c语言格式对齐
set cindent
" 开启自动查找单词,输入搜索模式时，每输入一个字符，就自动跳到第一个匹配的结果
set incsearch
" 启动文件类型加载插件根据文件类型不同加载对应插件
" if has('autocmd')
    " filetype plugin indent on
" endif
" 启动vim时不显示介绍信息
set shortmess+=I
" 默认设置窗口标题
set title
" 搜索时不忽略大小写（默认也是这样）
set smartcase
" 搜索时忽略大小写
"set ignorecase
" 启用搜索突出显示
"set hlsearch

" 在状态栏显示mode而不是单独显示
set noshowmode
"启用256色
set t_Co=256
" 启用鼠标
"set mouse=a
"不启用任何提示音
"set noerrorbells
"set visualbell
"命令模式下，底部操作指令按下 Tab 键自动补全。第一次按下 Tab，会显示所有匹配的操作指令的清单；第二次按下 Tab，会依次选择各个指令
set wildmenu
set wildmode=longest:list,full
" 隐藏缓冲区
set hidden " 避免必须保存修改才可以跳转buffer
" 将历史记录增加到1000
set history=1000
" vim
set wrap
"打开英语单词的拼写检查
"set spell spelllang=en_us
"不创建备份文件
"set nobackup
"不创建交换文件
set noswapfile
"保存撤销历史，下次打开文件可以继续使用撤销等操作
set undofile
"设置文件保存路径这些文件要先创建一下
"set backupdir=~/.vim/.backup/  
"set directory=~/.vim/.swp/
set undodir=~/.vim/.undo/ 
"工作目录随文件改变而改变到正在编辑的文件目录中
"set autochdir
"光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个圆括号、方括号和大括号
set showmatch
"指定折行处与编辑窗口的右边缘之间空出的字符数
set wrapmargin=2
" 避免粘贴代码乱格式
set pastetoggle=<F9>
"生成tags
set tags=./tags;../tags
" 开启文件类型检测--自适应不同语言的智能缩进
filetype plugin on
" 基于缩进或语法进行代码折叠
"set foldmethod=indent
" set foldmethod=syntax
" 设置 tagbar 子窗口的位置出现在主编辑区的左边 
let tagbar_left=1
" let tagbar_right=1
" set autoread
" set autowriteall
" 代码折叠:za--打开或关闭当前折叠，zM关闭所有折叠,zR打开所有折叠
set foldmethod=indent "基于缩进进行折叠
" set foldmethod=manual "手动建立折叠
" set foldmethod=syntax "基于语法进行折叠
" set foldmethod=diff "基于未更改文本进行折叠
set nofoldenable "启动vim时关闭折叠

"-----------映射键配置--------------
" 插入匹配括号
inoremap ( ()<LEFT>
inoremap [ []<LEFT>
inoremap { {}<LEFT>
inoremap ' ''<LEFT>
inoremap " ""<LEFT>
" save file
nnoremap <leader>w :wa<CR>
" Save a file as root (,W)
noremap <leader>W :wa sudo://%<CR>
inoremap <leader>w <Esc>:wa<cr>a
" inoremap jj <Esc>`^
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" reload local file
noremap <leader>e :e<CR>
"手动生成标签配置
"ctags--vim默认快捷键c-]跳到一个函数处(:tnext下一个匹配处，:tprevious上一个)，g-]列出所有函数
"c-i返回上一个查看函数的地方，c-o返回上一次光标停留处,c-t返回先前调用处
nnoremap <F5> :!ctags -R<cr>
"nnoremap <F5> :call pathogen#helptags()<cr>
" 避免跳转时只匹配第一个，而是可以选择转到哪个
" map <c-]> g<c-]>
" buffer
nnoremap <s-Tab> :bp<CR>
nnoremap <Tab> :bn<CR>
" insert
inoremap <C-u> <Esc>$v^di
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-e> <Esc>$a
inoremap <C-l> <Esc>ggvG$di
inoremap <C-k> <Right><Esc>d$a
inoremap <C-w> <Esc>$v^di
"tnux中连续按两次c-a就可以到行首同时tmux配置中加bind C-a send-prefix
inoremap <C-a> <Esc>^i
inoremap <C-d>d <Esc>^v$yo<C-r>0
" 切分窗口后光标移动到新开的窗口
nnoremap <C-w>s <C-w>s<C-w>w
nnoremap <C-w>v <C-w>v<C-w>w
"map <C-space> /
"C-w C-k terminal operate
"
" Read-only pdf through pdftotext
" autocmd BufReadPre *.pdf silent set ro
" autocmd BufReadPost *.pdf silent %!pdftotext -nopgbrk -layout -q -eol unix "%" - | fmt -w78
